#!/usr/bin/env python3
import logging
import os

import django

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "cpchain.market.market.settings")
django.setup()

from django.db.models import Avg
from cpchain.market.comment.models import Comment, SummaryComment
from cpchain.market.product.models import Product
from datetime import datetime
from apscheduler.schedulers.blocking import BlockingScheduler

logger = logging.getLogger(__name__)


def sync_rating():
    logger.info('run at:%s' % datetime.now())
    # calculate avg rating for product
    for p in Product.objects.all():
        pid = p.msg_hash
        logger.debug('product id:%s' % pid)
        product_rating = Comment.objects.filter(market_hash=pid).aggregate(Avg('rating'))['rating__avg']
        logger.debug('product_rating:%r' % product_rating)
        product_rating = 5 if not product_rating else product_rating
        comment, created = SummaryComment.objects.get_or_create(market_hash=pid, avg_rating=product_rating)
        logger.debug('comment:%s' % comment.market_hash)
        if not created:
            logger.debug('update avg_rating')
            comment.avg_rating = product_rating
            comment.save()


if __name__ == '__main__':
    scheduler = BlockingScheduler()
    scheduler.add_executor('processpool')
    scheduler.add_job(sync_rating, 'interval', seconds=10)
    print('Press Ctrl+{0} to exit'.format('Break' if os.name == 'nt' else 'C'))

    try:
        scheduler.start()
    except (KeyboardInterrupt, SystemExit):
        pass
