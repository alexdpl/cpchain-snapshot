#!/usr/bin/env python3
import os
import sys
import logging
import time

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "cpchain.market.market.settings")

import django

django.setup()
from datetime import datetime

import toml
from apscheduler.schedulers.blocking import BlockingScheduler

from cpchain import config
from cpchain.chain import utils, models
from cpchain.market.product.models import Product
from cpchain.utils import join_with_root, join_with_rc, Encoder
from cpchain.chain.agents import Agent, BuyerAgent
from cpchain.crypto import RSACipher

from rest_framework import serializers
from cpchain.market.transaction.models import TransactionDetail, ProductSaleStatus

logger = logging.getLogger(__name__)


class TransactionDetailSerializer(serializers.ModelSerializer):
    class Meta:
        model = TransactionDetail
        fields = ('seller_address', 'market_hash', 'buyer_address')


class ProductSaleStatusSerializer(serializers.ModelSerializer):
    class Meta:
        model = ProductSaleStatus
        fields = ('market_hash', 'sales_number')


class MarketSyncChainBlockNumberRecorder:
    recorder_path = '.market_sync_chain_block_number_recorder.toml'
    recorder_path = join_with_rc(recorder_path)
    empty_record = {
        'sales_num_block_number': 0,
        'transaction_detail_block_number': 0,
    }
    if not os.path.exists(recorder_path):
        with open(recorder_path, 'w') as f:
            toml.dump(empty_record, f)

    @staticmethod
    def load_record(recorder_path=None):
        recorder_path = recorder_path or MarketSyncChainBlockNumberRecorder.recorder_path
        with open(recorder_path, 'r') as f:
            record = toml.load(f)
            return record

    @staticmethod
    def dump_record(record, recorder_path=None):
        recorder_path = recorder_path or MarketSyncChainBlockNumberRecorder.recorder_path
        with open(recorder_path, 'w') as f:
            toml.dump(record, f)


class MarketAgent(Agent):

    def update_sales_num_to_db(self):
        product_id_list = []
        record = MarketSyncChainBlockNumberRecorder.load_record()
        fromBlock = record.get('sales_num_block_number', 0)
        toBlock = 'latest'
        event_filter = self.contract.events.OrderInitiated.createFilter(
            fromBlock=fromBlock, toBlock=toBlock)
        order_event_list = event_filter.get_all_entries()
        for event in order_event_list:
            order_id = event['args']['orderId']
            order = self.query_order(order_id)
            desc_hash = order[0]
            product_id = Encoder.bytes_to_base64_str(desc_hash)
            product_id_list.append(product_id)
            product_sale_status, _ = ProductSaleStatus.objects.get_or_create(market_hash=product_id)
            serializer = ProductSaleStatusSerializer(product_sale_status)
            updated_data = serializer.data
            updated_data['sales_number'] = updated_data['sales_number'] + 1
            serializer.update(product_sale_status, updated_data)
            logger.debug('updated sales number:%s' % str(updated_data))
        if order_event_list:
            record['sales_num_block_number'] = order_event_list[-1]['blockNumber'] + 1
        MarketSyncChainBlockNumberRecorder.dump_record(record)
        return product_id_list

    def update_transaction_detail_to_db(self):
        record = MarketSyncChainBlockNumberRecorder.load_record()
        fromBlock = record.get('transaction_detail_block_number', 0)
        toBlock = 'latest'
        event_filter = self.contract.events.OrderInitiated.createFilter(
            fromBlock=fromBlock, toBlock=toBlock)
        order_event_list = event_filter.get_all_entries()
        for event in order_event_list:
            order_id = event['args']['orderId']
            order = self.query_order(order_id)
            desc_hash = order[0]
            buyer_address = order[2]
            seller_address = order[3]
            transaction_detail, _ = TransactionDetail.objects.get_or_create(
                market_hash=Encoder.bytes_to_base64_str(desc_hash),
                buyer_address=buyer_address,
                seller_address=seller_address)
            serializer = TransactionDetailSerializer(transaction_detail)
            logger.debug('updated transaction detail: %s' % str(serializer.data))
        if order_event_list:
            record['transaction_detail_block_number'] = order_event_list[-1]['blockNumber'] + 1
        MarketSyncChainBlockNumberRecorder.dump_record(record)


def testMarketAgent():
    w3 = utils.default_w3
    bin_path = join_with_root(config.chain.contract_bin_path)
    contract_name = config.chain.contract_name

    # deploy contract
    contract = utils.deploy_contract(bin_path, contract_name, w3)

    print(contract)
    # init a buyer agent to place order.
    bagent = BuyerAgent(w3, bin_path, contract_name)

    # generate an order_info.
    desc_hash_base64 = 'AQkKqDxtNIRJ+1V82J5lP2/fRj/zbJ+2n0GzUF52Wsc='
    desc_hash = Encoder.str_to_base64_byte(desc_hash_base64)

    buyer_rsa_pubkey = RSACipher.load_public_key()

    order_info = models.OrderInfo(
        desc_hash=desc_hash,
        buyer_rsa_pubkey=buyer_rsa_pubkey,
        seller=bagent.web3.eth.defaultAccount,
        proxy=bagent.web3.eth.defaultAccount,
        secondary_proxy=bagent.web3.eth.defaultAccount,
        proxy_value=10,
        value=20,
        time_allowed=100
    )

    print(bagent.contract.address)

    # place two order.
    order_id = bagent.place_order(order_info)
    print(order_id)

    order_id = bagent.place_order(order_info)
    print(order_id)

    # test query_order
    order = bagent.query_order(1)
    print(order)

    # init a market agent to get info from chain.
    magent = MarketAgent(w3, bin_path, contract_name)
    magent.update_sales_num_to_db()
    magent.update_transaction_detail_to_db()


def sync_from_chain():
    logger.info('run at:%s' % datetime.now())
    w3 = utils.default_w3
    bin_path = join_with_root(config.chain.contract_bin_path)
    contract_name = config.chain.contract_name

    magent = MarketAgent(w3, bin_path, contract_name)
    product_id_list = magent.update_sales_num_to_db()
    magent.update_transaction_detail_to_db()
    # sync data to elasticsearch
    for p in product_id_list:
        try:
            product = Product.objects.get(msg_hash=p)
            product.indexing()
        except:
            logger.exception("index product failed")
            pass

    # time.sleep(10)


if __name__ == '__main__':
    if len(sys.argv) == 2 and sys.argv[1] == 'test':
        testMarketAgent()
    else:

        scheduler = BlockingScheduler()
        scheduler.add_executor('processpool')
        scheduler.add_job(sync_from_chain, 'interval', seconds=10)
        print('Press Ctrl+{0} to exit'.format('Break' if os.name == 'nt' else 'C'))

        try:
            scheduler.start()
        except (KeyboardInterrupt, SystemExit):
            pass
